{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    setTimeout(() => {\n      fetch(url).then(response => {\n        if (!response.ok) {\n          console.log(10);\n          throw Error('could not fetch the error');\n        }\n\n        return response.json();\n      }).then(data => {\n        setData(data);\n        setIsPending(false);\n        setError(null);\n      }).catch(err => {\n        setIsPending(false);\n        setError(err.message);\n      });\n    }, 1000);\n    return () => console.log('cleanup');\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n\n_s(useFetch, \"VxPkICXS4AfkXU1R8tuEJAA8e58=\");\n\nexport default useFetch;","map":{"version":3,"sources":["C:/Users/alext/Desktop/React/React project code along - NET Ninja/dojo-blog/src/useFetch.js"],"names":["useState","useEffect","useFetch","url","data","setData","isPending","setIsPending","error","setError","setTimeout","fetch","then","response","ok","console","log","Error","json","catch","err","message"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAGA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AAEtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AAGAC,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,UAAU,CAAC,MAAM;AACbC,MAAAA,KAAK,CAACR,GAAD,CAAL,CACKS,IADL,CACUC,QAAQ,IAAI;AAEd,YAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAAEC,UAAAA,OAAO,CAACC,GAAR,CAAY,EAAZ;AAAiB,gBAAMC,KAAK,CAAC,2BAAD,CAAX;AAA2C;;AAChF,eAAOJ,QAAQ,CAACK,IAAT,EAAP;AACH,OALL,EAMKN,IANL,CAMUR,IAAI,IAAI;AACVC,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,OAVL,EAWKU,KAXL,CAWWC,GAAG,IAAI;AACVb,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,QAAQ,CAACW,GAAG,CAACC,OAAL,CAAR;AACH,OAdL;AAeH,KAhBS,EAgBP,IAhBO,CAAV;AAkBA,WAAO,MAAMN,OAAO,CAACC,GAAR,CAAY,SAAZ,CAAb;AAEH,GArBQ,EAqBN,CAACb,GAAD,CArBM,CAAT;AAuBA,SAAO;AAAEC,IAAAA,IAAF;AAAQE,IAAAA,SAAR;AAAmBE,IAAAA;AAAnB,GAAP;AACH,CA/BD;;GAAMN,Q;;AAiCN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\n\r\nconst useFetch = (url) => {\r\n\r\n    const [data, setData] = useState(null);\r\n    const [isPending, setIsPending] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            fetch(url)\r\n                .then(response => {\r\n\r\n                    if (!response.ok) { console.log(10); throw Error('could not fetch the error'); }\r\n                    return response.json();\r\n                })\r\n                .then(data => {\r\n                    setData(data);\r\n                    setIsPending(false);\r\n                    setError(null);\r\n                })\r\n                .catch(err => {\r\n                    setIsPending(false);\r\n                    setError(err.message);\r\n                })\r\n        }, 1000);\r\n\r\n        return () => console.log('cleanup');\r\n\r\n    }, [url]);\r\n\r\n    return { data, isPending, error };\r\n}\r\n\r\nexport default useFetch;"]},"metadata":{},"sourceType":"module"}